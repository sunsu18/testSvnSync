<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Mon Sep 08 18:35:19 IST 2014
  Author:  10602239
  Type: BPEL 1.1 Process
  Purpose: Empty BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="GenerateBusinessHourAlert"
               targetNamespace="http://www.lntinfotech.com/integration/E013BusinessHourRuleApp/E013BusinessHourRule/GenerateBusinessHourAlert"
               xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
               xmlns:client="http://www.lntinfotech.com/integration/E013BusinessHourRuleApp/E013BusinessHourRule/GenerateBusinessHourAlert"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns1="http://xmlns.oracle.com/pcbpel/adapter/jms/E013BusinessHourRuleApp/E013BusinessHourRule/SOARuleEngineServiceJMSConsumerV1"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:aia="http://www.oracle.com/XSL/Transform/java/oracle.apps.aia.core.xpath.AIAFunctions"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns2="http://www.lntinfotech.com/integration/RuleServiceABO"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns3="http://xmlns.oracle.com/pcbpel/adapter/db/E013BusinessHourRuleApp/E013BusinessHourRule/selectTransactionDBAdapterV1"
         xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/db/top/selectTransactionDBAdapterV1"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/db/E013BusinessHourRuleApp/E013BusinessHourRule/insertCardNotificationsDBAdpterV1"
         xmlns:ns6="http://xmlns.oracle.com/pcbpel/adapter/jms/E013BusinessHourRuleApp/E013BusinessHourRule/SOARuleEngineNotificationJMSProducerV1"
         xmlns:ns7="http://www.lntinfotech.com/integration/SOARuleEngineNotification">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <partnerLinks>
    <partnerLink name="SOARuleEngineServiceJMSConsumerV1"
                 partnerLinkType="ns1:Consume_Message_plt"
                 myRole="Consume_Message_role"/>
    <partnerLink name="selectTransactionDBAdapterV1"
                 partnerLinkType="ns3:selectTransactionDBAdapterV1_plt"
                 partnerRole="selectTransactionDBAdapterV1_role"/>
    <partnerLink name="insertCardNotificationsDBAdpterV1"
                 partnerLinkType="ns5:insertCardNotificationsDBAdpterV1_plt"
                 partnerRole="insertCardNotificationsDBAdpterV1_role"/>
    <partnerLink name="SOARuleEngineNotificationJMSProducerV1"
                 partnerLinkType="ns6:Produce_Message_plt"
                 partnerRole="Produce_Message_role"/>
  </partnerLinks>
  <variables>
    <variable name="RuleServiceABO_Consume_IV"
              messageType="ns1:Consume_Message_msg"/>
    <variable name="exception" type="xsd:string"/>
    <variable name="InvokeSOARuleEngineNotificationJMSProducerV1_IV"
              messageType="ns6:Produce_Message_msg"/>
  </variables>
  <faultHandlers>
    <catchAll>
      <sequence name="FaultHandlingSequence">
        <assign name="AssignNotificationReq">
          <copy>
            <from expression="ora:getFaultAsString()"/>
            <to variable="exception"/>
          </copy>
          <copy>
            <from expression="'Email'"/>
            <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_IV"
                part="body"
                query="/ns7:NotificationRequest/ns7:NotificationChannel"/>
          </copy>
          <copy>
            <from expression="'harneet.kochhar@lntinfotech.com;nitin.palde@lntinfotech.com'"/>
            <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_IV"
                part="body" query="/ns7:NotificationRequest/ns7:EmailID"/>
          </copy>
          <copy>
            <from expression="'Error during execution of interface E013'"/>
            <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_IV"
                part="body"
                query="/ns7:NotificationRequest/ns7:NotificationSubject"/>
          </copy>
          <copy>
            <from expression="'Hi Associate, &lt;br>&lt;br> Exception occurred during execution of interface E013. Please look into the issue.'"/>
            <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_IV"
                part="body"
                query="/ns7:NotificationRequest/ns7:NotificationBody"/>
          </copy>
        </assign>
        <invoke name="InvokeSOARuleEngineNotificationJMSProducerV1" bpelx:invokeAsDetail="no"
                inputVariable="InvokeSOARuleEngineNotificationJMSProducerV1_IV"
                partnerLink="SOARuleEngineNotificationJMSProducerV1"
                portType="ns6:Produce_Message_ptt" operation="Produce_Message"/>
      </sequence>
    </catchAll>
  </faultHandlers>
  <sequence name="main">
    <receive name="ReceiveRuleServiceABO" createInstance="yes"
             variable="RuleServiceABO_Consume_IV"
             partnerLink="SOARuleEngineServiceJMSConsumerV1"
             portType="ns1:Consume_Message_ptt" operation="Consume_Message"/>
    <scope name="checkSubscriptionScope" variableAccessSerializable="no">
      <variables>
        <variable name="iterator" type="xsd:int"/>
        <variable name="flag" type="xsd:short"/>
        <variable name="preDay" type="xsd:string"/>
        <variable name="curDay" type="xsd:string"/>
        <variable name="preDate" type="xsd:string"/>
        <variable name="curDate" type="xsd:string"/>
        <variable name="preStartTime" type="xsd:time"/>
        <variable name="curStartTime" type="xsd:time"/>
        <variable name="preEndTime" type="xsd:time"/>
        <variable name="curEndTime" type="xsd:time"/>
        <variable name="CountryCode" type="xsd:string"/>
      </variables>
      <sequence name="checkSubscriptionSequence">
        <assign name="AssignInitializeIterator">
          <copy>
            <from expression="string(bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/NotificationDateTime'))"/>
            <to variable="curDate"/>
          </copy>
          <copy>
            <from expression="1"/>
            <to variable="iterator"/>
          </copy>
          <copy>
            <from expression="0"/>
            <to variable="flag"/>
          </copy>
          <copy>
            <from expression="string(xp20:subtract-dayTimeDuration-from-dateTime(bpws:getVariableData('curDate'),'P1D'))"/>
            <to variable="preDate"/>
          </copy>
        </assign>
        <assign name="AssignDay">
          <copy>
            <from expression="xp20:format-dateTime(bpws:getVariableData('preDate'),'[FNn]')"/>
            <to variable="preDay"/>
          </copy>
          <copy>
            <from expression="xp20:format-dateTime(bpws:getVariableData('curDate'),'[FNn]')"/>
            <to variable="curDay"/>
          </copy>
        </assign>
        
        <while name="WhileCountryCodeCheck"
               condition="bpws:getVariableData('iterator') &lt;= count(bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter'))">
          <sequence name="Sequence">
            <switch name="countryCodeSwitch">
              <case condition="bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Name') = 'CountryCode'">
                <bpelx:annotation>
                  <bpelx:general>
                    <bpelx:property name="userLabel">isCountryCodeGiven</bpelx:property>
                  </bpelx:general>
                </bpelx:annotation>
                <assign name="AssignCountryCode">
                  <copy>
                    <from expression="1"/>
                    <to variable="flag"/>
                  </copy>
                  <copy>
                    <from expression="bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Value')"/>
                    <to variable="CountryCode"/>
                  </copy>
                </assign>
              </case>
              <otherwise>
                <empty name="Empty"/>
              </otherwise>
            </switch>
            <assign name="AssignIncrementIterator">
              <copy>
                <from expression="bpws:getVariableData('iterator') + 1"/>
                <to variable="iterator"/>
              </copy>
            </assign>
          </sequence>
        </while>
        <assign name="Assigniterator">
          <copy>
            <from expression="1"/>
            <to variable="iterator"/>
          </copy>
        </assign>
        <while name="WhileSubscriptionCheck"
               condition="bpws:getVariableData('iterator') &lt;= count(bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter'))">
          <sequence name="Sequence">
            <switch name="subscriptionSwitch">
              <case condition="bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Name') = bpws:getVariableData('curDay')">
                <bpelx:annotation>
                  <bpelx:general>
                    <bpelx:property name="userLabel">isSubscribedForToday</bpelx:property>
                  </bpelx:general>
                </bpelx:annotation>
                <assign name="AssignSetFlag">
                  <copy>
                    <from expression="1"/>
                    <to variable="flag"/>
                  </copy>
                  <copy>
                    <from expression="substring-before(bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Value'),'to')"/>
                    <to variable="curStartTime"/>
                  </copy>
                  <copy>
                    <from expression="substring-after(bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Value'),'to')"/>
                    <to variable="curEndTime"/>
                  </copy>
                </assign>
              </case>
              <otherwise>
                <empty name="Empty"/>
              </otherwise>
            </switch>
            <assign name="AssignIncrementIterator">
              <copy>
                <from expression="bpws:getVariableData('iterator') + 1"/>
                <to variable="iterator"/>
              </copy>
            </assign>
          </sequence>
        </while>
        <sequence name="checkPrevDaySubsSequence">
          <switch name="todaySubscriptionFlagSwitch">
            <case condition="(bpws:getVariableData('flag') = 1) and (bpws:getVariableData('CountryCode')  != '')">
              <bpelx:annotation>
                <bpelx:general>
                  <bpelx:property name="userLabel">IfFlagSetAndCountryCodeAvailable</bpelx:property>
                </bpelx:general>
              </bpelx:annotation>
              <sequence name="Sequence1">
                <assign name="AssignInitializeIterator">
                  <copy>
                    <from expression="1"/>
                    <to variable="iterator"/>
                  </copy>
                  <copy>
                    <from expression="0"/>
                    <to variable="flag"/>
                  </copy>
                </assign>
                <while name="WhileSubscriptionCheck"
                       condition="bpws:getVariableData('iterator') &lt;= count(bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter'))"
                       xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/">
      
   <sequence name="checkPrevDaySubsSequence">
                    <switch name="subscriptionSwitch">
         <case condition="bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Name') = bpws:getVariableData('preDay')">
            <bpelx:annotation xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
               <bpelx:general>
                  <bpelx:property name="userLabel">isSubscribedForPrevday</bpelx:property>
               </bpelx:general>
            </bpelx:annotation>
            <assign name="AssignSetFlag">
                          <copy>
                            <from expression="1"/>
                            <to variable="flag"/>
                          </copy>
                          <copy>
                            <from expression="substring-before(bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Value'),'to')"/>
                            <to variable="preStartTime"/>
                          </copy>
                          <copy>
                            <from expression="substring-after(bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Value'),'to')"/>
                            <to variable="preEndTime"/>
                          </copy>
                        </assign>
         </case>
         <otherwise>
            <empty name="Empty"/>
         </otherwise>
      </switch>
                    <assign name="AssignIncrementiterator">
                      <copy>
                        <from expression="bpws:getVariableData('iterator') + 1"/>
                        <to variable="iterator"/>
                      </copy>
                    </assign>
                  </sequence></while>
                <scope name="Scope1">
                  <bpelx:annotation>
                    <bpelx:general>
                      <bpelx:property name="userLabel">minMaxCalculationScope</bpelx:property>
                    </bpelx:general>
                  </bpelx:annotation>
                  <variables>
                    <variable name="leftMin" type="xsd:string"/>
                    <variable name="leftMax" type="xsd:string"/>
                    <variable name="rightMin" type="xsd:string"/>
                    <variable name="rightMax" type="xsd:string"/>
                  </variables>
                  <sequence name="Sequence3">
                    <switch name="prevDaySubscribedSwitch">
                      <case condition="bpws:getVariableData('flag') = 1">
                        <bpelx:annotation>
                          <bpelx:general>
                            <bpelx:property name="userLabel">IfSubscribedForPrevDay</bpelx:property>
                          </bpelx:general>
                        </bpelx:annotation>
                        <sequence name="Sequence2">
                          <switch name="Switch1">
                            <case condition="bpws:getVariableData('preStartTime')  > bpws:getVariableData('preEndTime')">
                              <bpelx:annotation>
                                <bpelx:general>
                                  <bpelx:property name="userLabel">preStartTimeGreaterthanpreEndTime</bpelx:property>
                                </bpelx:general>
                              </bpelx:annotation>
                              <assign name="AssignLeftLabelTimings">
                                <copy>
                                  <from expression="concat(xp20:format-dateTime(bpws:getVariableData('preDate'),'[Y0001]-[M01]-[D01]'),'T',bpws:getVariableData('preEndTime'))"/>
                                  <to variable="leftMin"/>
                                </copy>
                                <copy>
                                  <from expression="concat(xp20:format-dateTime(bpws:getVariableData('curDate'),'[Y0001]-[M01]-[D01]'),'T',bpws:getVariableData('curStartTime'))"/>
                                  <to variable="leftMax"/>
                                </copy>
                              </assign>
                            </case>
                            <otherwise>
                              <assign name="AssignReverseLeftLabelTimings">
                                <copy>
                                  <from expression="concat(xp20:format-dateTime(bpws:getVariableData('curDate'),'[Y0001]-[M01]-[D01]'),'T','00:00:00.000000')"/>
                                  <to variable="leftMin"/>
                                </copy>
                                <copy>
                                  <from expression="concat(xp20:format-dateTime(bpws:getVariableData('curDate'),'[Y0001]-[M01]-[D01]'),'T',bpws:getVariableData('curStartTime'))"/>
                                  <to variable="leftMax"/>
                                </copy>
                              </assign>
                            </otherwise>
                          </switch>
                        </sequence>
                      </case>
                      <otherwise>
                        <assign name="AssignLeftTiming">
                          <copy>
                            <from expression="concat(xp20:format-dateTime(bpws:getVariableData('curDate'),'[Y0001]-[M01]-[D01]'),'T','00:00:00.000000')"/>
                            <to variable="leftMin"/>
                          </copy>
                          <copy>
                            <from expression="concat(xp20:format-dateTime(bpws:getVariableData('curDate'),'[Y0001]-[M01]-[D01]'),'T',bpws:getVariableData('curStartTime'))"/>
                            <to variable="leftMax"/>
                          </copy>
                        </assign>
                      </otherwise>
                    </switch>
                    <switch name="curDayHourSwitch">
                      <case condition="bpws:getVariableData('curStartTime') > bpws:getVariableData('curEndTime')">
                        <bpelx:annotation>
                          <bpelx:general>
                            <bpelx:property name="userLabel">ifCurStartTimeGreaterThanCurEndTime</bpelx:property>
                          </bpelx:general>
                        </bpelx:annotation>
                        <assign name="AssignRightLabelTimings">
                          <copy>
                            <from variable="leftMin"/>
                            <to variable="rightMin"/>
                          </copy>
                          <copy>
                            <from variable="leftMax"/>
                            <to variable="rightMax"/>
                          </copy>
                        </assign>
                      </case>
                      <otherwise>
                        <assign name="AssignReverseRightLabelTimings">
                          <copy>
                            <from expression="concat(xp20:format-dateTime(bpws:getVariableData('curDate'),'[Y0001]-[M01]-[D01]'),'T',bpws:getVariableData('curEndTime'))"/>
                            <to variable="rightMin"/>
                          </copy>
                          <copy>
                            <from expression="concat(xp20:format-dateTime(bpws:getVariableData('curDate'),'[Y0001]-[M01]-[D01]'),'T','23:59:59.000000')"/>
                            <to variable="rightMax"/>
                          </copy>
                        </assign>
                      </otherwise>
                    </switch>
                    <scope name="cardDataProcessingScope"
                           variableAccessSerializable="no">
                      <bpelx:annotation>
                        <bpelx:general>
                          <bpelx:property name="userLabel">cardDataProcessingScope</bpelx:property>
                        </bpelx:general>
                      </bpelx:annotation>
                      <variables>
                        <variable name="cardID" type="xsd:string"/>
                        <variable name="InvokeselectTransactionDBAdapterV1_IV"
                                  messageType="ns3:selectTransactionDBAdapterV1Select_inputParameters"/>
                        <variable name="InvokeselectTransactionDBAdapterV1_OV"
                                  messageType="ns3:PrtCardTransactionHeaderCollection_msg"/>
                        <variable name="insertCardNotificationsDBAdpterV1_IV"
                                  messageType="ns5:PrtCardNotificationsCollection_msg"/>
                      </variables>
                      <sequence name="cardDataProcessingSequence">
                        <assign name="AssignIterator">
                          <copy>
                            <from expression="1"/>
                            <to variable="iterator"/>
                          </copy>
                          <copy>
                            <from expression="0"/>
                            <to variable="flag"/>
                          </copy>
                        </assign>
                        <while name="WhileparamterForCARD"
                               condition="bpws:getVariableData('iterator') &lt;= count(bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter'))">
                          <sequence name="Sequence4">
                            <switch name="ifCARDavailableSwitch">
                              <case condition="bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Name') = 'CARD'">
                                <bpelx:annotation>
                                  <bpelx:general>
                                    <bpelx:property name="userLabel">ifCARDexists</bpelx:property>
                                  </bpelx:general>
                                </bpelx:annotation>
                                <sequence name="Sequence5">
                                  <assign name="AssignCARDid">
                                    <copy>
                                      <from expression="bpws:getVariableData('RuleServiceABO_Consume_IV','body','/ns2:RuleServiceRequest/Parameters/Parameter[$iterator]/Value')"/>
                                      <to variable="cardID"/>
                                    </copy>
                                    <copy>
                                      <from expression="1"/>
                                      <to variable="flag"/>
                                    </copy>
                                  </assign>
    <!--bpelx:exec import="java.lang.String"/>
                                  <bpelx:exec name="Java_Embedding"
                                              version="1.5" language="java">
                                    <![CDATA[/*Write your java code below e.g.   
	System.out.println("Hello, World");  
*/  
String cards = getVariableData("cardID").toString();  
  
cards = cards.replaceAll(",","','");  
cards =  "('".concat(cards.concat("')")); 
 
  
setVariableData("cardID",cards);]]>
                                  </bpelx:exec-->
                                </sequence>
                              </case>
                              <otherwise>
                                <empty name="Empty"/>
                              </otherwise>
                            </switch>
                            <assign name="AssignIncrementIterator">
                              <copy>
                                <from expression="bpws:getVariableData('iterator') + 1"/>
                                <to variable="iterator"/>
                              </copy>
                            </assign>
                          </sequence>
                        </while>
                        <switch name="FalgSwitch">
                          <case condition="bpws:getVariableData('flag') = 1">
                            <bpelx:annotation>
                              <bpelx:general>
                                <bpelx:property name="userLabel">ifFlagis1</bpelx:property>
                              </bpelx:general>
                            </bpelx:annotation>
                            <sequence name="fetchTransactionAlertSequence">
                              <assign name="AssignInvokeselectTransactionDBAdapterV1_IV">
                                <!--copy>
                                  <from expression="concat(&quot;'&quot;,bpws:getVariableData('leftMin'),&quot;'&quot;)"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardIDInputParameters/ns4:leftMin"/>
                                </copy>
                                <copy>
                                  <from expression="concat(&quot;'&quot;,bpws:getVariableData('leftMax'),&quot;'&quot;)"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardIDInputParameters/ns4:leftMax"/>
                                </copy>
                                <copy>
                                  <from expression="concat(&quot;'&quot;,bpws:getVariableData('rightMin'),&quot;'&quot;)"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardIDInputParameters/ns4:rightMin"/>
                                </copy>
                                <copy>
                                  <from expression="concat(&quot;'&quot;,bpws:getVariableData('rightMax'),&quot;'&quot;)"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardIDInputParameters/ns4:rightMax"/>
                                </copy-->
                                <copy>
                                  <from variable="CountryCode"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardID_CountryCodeInputParameters/ns4:CountryCode"/>
                                </copy>
                                <copy>
                                  <from expression="xp20:format-dateTime(bpws:getVariableData('leftMin'),'[D01]-[MN,*-3]-[Y01] [h01].[m01].[s01].[f001] [PN]')"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardID_CountryCodeInputParameters/ns4:leftMin"/>
                                </copy>
                                <copy>
                                  <from expression="xp20:format-dateTime(bpws:getVariableData('leftMax'),'[D01]-[MN,*-3]-[Y01] [h01].[m01].[s01].[f001] [PN]')"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardID_CountryCodeInputParameters/ns4:leftMax"/>
                                </copy>
                                <copy>
                                  <from expression="xp20:format-dateTime(bpws:getVariableData('rightMin'),'[D01]-[MN,*-3]-[Y01] [h01].[m01].[s01].[f001] [PN]')"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardID_CountryCodeInputParameters/ns4:rightMin"/>
                                </copy>
                                <copy>
                                  <from expression="xp20:format-dateTime(bpws:getVariableData('rightMax'),'[D01]-[MN,*-3]-[Y01] [h01].[m01].[s01].[f001] [PN]')"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardID_CountryCodeInputParameters/ns4:rightMax"/>
                                </copy>
                                <copy>
                                  <from expression="bpws:getVariableData('cardID')"/>
                                  <to variable="InvokeselectTransactionDBAdapterV1_IV"
                                      part="selectTransactionDBAdapterV1Select_inputParameters"
                                      query="/ns4:selectTransactionDBAdapterV1Select_leftMin_leftMax_rightMin_rightMax_cardID_CountryCodeInputParameters/ns4:cardID"/>
                                </copy>
                              </assign>
                              <invoke name="InvokeselectTransactionDBAdapterV1" bpelx:invokeAsDetail="no"
                                      inputVariable="InvokeselectTransactionDBAdapterV1_IV"
                                      outputVariable="InvokeselectTransactionDBAdapterV1_OV"
                                      partnerLink="selectTransactionDBAdapterV1"
                                      portType="ns3:selectTransactionDBAdapterV1_ptt"
                                      operation="selectTransactionDBAdapterV1Select"/>
                              <assign name="XformTransactionToNotifications">
                                <bpelx:annotation>
                                  <bpelx:pattern>transformation</bpelx:pattern>
                                </bpelx:annotation>
                                <copy>
                                  <from expression="ora:doXSLTransformForDoc('xsl/TransactionToCardNotifications.xsl', $InvokeselectTransactionDBAdapterV1_OV.PrtCardTransactionHeaderCollection, 'RuleServiceABO_Consume_IV.body', $RuleServiceABO_Consume_IV.body)"/>
                                  <to variable="insertCardNotificationsDBAdpterV1_IV"
                                      part="PrtCardNotificationsCollection"/>
                                </copy>
                              </assign>
                              <invoke name="InvokeInsertCardNotificationsDBAdpterV1" bpelx:invokeAsDetail="no"
                                      inputVariable="insertCardNotificationsDBAdpterV1_IV"
                                      partnerLink="insertCardNotificationsDBAdpterV1"
                                      portType="ns5:insertCardNotificationsDBAdpterV1_ptt"
                                      operation="insert"/>
                            </sequence>
                          </case>
                          <otherwise>
                            <empty name="Empty"/>
                          </otherwise>
                        </switch>
                      </sequence>
                    </scope>
                  </sequence>
                </scope>
              </sequence>
            </case>
            <otherwise>
              <empty name="Empty"/>
            </otherwise>
          </switch>
        </sequence>
      </sequence>
    </scope>
  </sequence>
</process>