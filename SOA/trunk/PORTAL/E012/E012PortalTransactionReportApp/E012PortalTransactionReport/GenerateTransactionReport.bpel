<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Wed Jul 16 18:54:34 IST 2014
  Author:  292001
  Type: BPEL 1.1 Process
  Purpose: One Way BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="GenerateTransactionReport"
               targetNamespace="http://xmlns.oracle.com/E012PortalTransactionReportApp/E012PortalTransactionReport/GenerateTransactionReport"
               xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
               xmlns:client="http://xmlns.oracle.com/E012PortalTransactionReportApp/E012PortalTransactionReport/GenerateTransactionReport"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:ns1="http://www.statoilfuelretail.com/integration/engage/E012PortalTransactionReportABO"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:aia="http://www.oracle.com/XSL/Transform/java/oracle.apps.aia.core.xpath.AIAFunctions"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/file/E012PortalTransactionReportApp/E012PortalTransactionReport/WriteTransactionReport"
         xmlns:ns3="http://xmlns.oracle.com/pcbpel/adapter/jms/E012PortalTransactionReportApp/E012PortalTransactionReport/SOARuleEngineNotificationJMSProducerV1"
         xmlns:ns4="http://www.lntinfotech.com/integration/SOARuleEngineNotification"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/jms/E012PortalTransactionReportApp/E012PortalTransactionReport/SOARuleEngineServiceJMSConsumerV1"
         xmlns:ns6="http://www.lntinfotech.com/integration/RuleServiceABO">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="generatetransactionreport_client" partnerLinkType="client:GenerateTransactionReport" myRole="GenerateTransactionReportProvider"/>
    <partnerLink name="WriteTransactionReport" partnerLinkType="ns2:Write_plt"
                 partnerRole="Write_role"/>
    <partnerLink name="SOARuleEngineNotificationJMSProducerV1"
                 partnerLinkType="ns3:Produce_Message_plt"
                 partnerRole="Produce_Message_role"/>
    <partnerLink name="SOARuleEngineServiceJMSConsumerV1"
                 partnerLinkType="ns5:Consume_Message_plt"
                 myRole="Consume_Message_role"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:GenerateTransactionReportRequestMessage"/>
    <variable name="transactionReport" element="ns1:TransactionReport"/>
    <variable name="transactionReportOutput"
              element="ns1:TransactionReportResponse"/>
    <variable name="txnReport" element="ns1:TransactionReport"/>
    <variable name="transactionReportInput"
              element="ns1:TransactionReportInput"/>
    <variable name="InvokeWriteTransactionReport_IV"
              messageType="ns2:Write_msg"/>
    <variable name="byteArrayString" type="xsd:string"/>
    <variable name="base64TxnData" type="xsd:base64Binary"/>
    <variable name="SOARuleEngineServiceJMSConsumerV1_IV"
              messageType="ns5:Consume_Message_msg"/>
  </variables>
  <faultHandlers>
    <catchAll>
      <empty name="Empty"/>
    </catchAll>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in GenerateTransactionReport.wsdl) -->
    <pick name="PickGenerateReportRequest" createInstance="yes">
      <onMessage variable="inputVariable"
                 partnerLink="generatetransactionreport_client"
                 portType="client:GenerateTransactionReport"
                 operation="generate">
        <assign name="XformInputToTxnInput">
          <bpelx:annotation>
            <bpelx:pattern>transformation</bpelx:pattern>
          </bpelx:annotation>
          <copy>
            <from expression="ora:doXSLTransformForDoc('xsl/E012Input_to_TransactionReportInput.xsl', $inputVariable.payload)"/>
            <to variable="transactionReportInput"/>
          </copy>
        </assign>
      </onMessage>
      <onMessage variable="SOARuleEngineServiceJMSConsumerV1_IV"
                 partnerLink="SOARuleEngineServiceJMSConsumerV1"
                 portType="ns5:Consume_Message_ptt"
                 operation="Consume_Message"><assign name="XformInputToTxnInput"
                                                     xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/">
      <bpelx:annotation xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
         <bpelx:pattern>transformation</bpelx:pattern>
      </bpelx:annotation>
      <copy>
         <from expression="ora:doXSLTransformForDoc('xsl/E012JMSInput_to_TransactionReportInput.xsl', $SOARuleEngineServiceJMSConsumerV1_IV.body)"/>
         <to variable="transactionReportInput"/>
      </copy>
   </assign></onMessage>
    </pick>
    <bpelx:exec import="e012portaltransactionreport.TransactionReport"/>
    <bpelx:exec import="e012portaltransactionreport.TransactionReportInput"/>
    <bpelx:exec import="e012portaltransactionreport.TransactionReportOutput"/>
    <bpelx:exec import="java.util.ArrayList"/>
    <bpelx:exec import="org.w3c.dom.Element"/>
    <bpelx:exec import="org.w3c.dom.Document"/>
    <bpelx:exec import="org.w3c.dom.Text"/>
    <!--bpelx:exec/-->
    <bpelx:exec name="Java_Embedding" version="1.5" language="java">
      <![CDATA[try {                        
//output variable of TransactionReportInput type to set Txn Report input          
TransactionReportInput input= new TransactionReportInput();        
        
//get input for Txn Report          
input.setCountry((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/Country")).getText()));            
input.setAccount((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/Account")).getText()));                 
input.setPartner((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/Partner")).getText()));                 
input.setType((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/Type")).getText()));                 
input.setReportType((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/ReportType")).getText()));                 
input.setTransactionBasis((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/TransactionBasis")).getText()));                 
input.setTransactionBasisValues((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/TransactionBasisValues")).getText()));                 
input.setTransactionDateFrom((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/TransactionDateFrom")).getText()));                 
input.setTransactionDateTo((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/TransactionDateTo")).getText()));           
addAuditTrailEntry("Transaction Input created");            
          
//output variable of TransactionReportOutput type to get Txn Report output          
TransactionReportOutput transaction = new TransactionReportOutput();                       
ArrayList transactionArray = new ArrayList<TransactionReportOutput>();                       
addAuditTrailEntry("Transaction output class initialised");           
          
//generate Txn Report          
transactionArray=TransactionReport.GenerateTransactionReport(input);               
addAuditTrailEntry("Transaction Report Generated");          
          
//Create Element of Txn type to return Transaction Report          
Element elementTransactionReport;          
elementTransactionReport = (Element)getVariableData("transactionReport");          
Document txndoc = elementTransactionReport.getOwnerDocument();     
     
Element rootElement = txndoc.getDocumentElement();    
          
//to loop through resultset to set the xml element          
for (int i = 0; i < transactionArray.size(); i++){            
// to set the transaction type output for each iteration          
transaction=(TransactionReportOutput)transactionArray.get(i);          
       
// to create transaction element from Class Array   
Element txnElement = txndoc.createElement("Transaction");        
rootElement.appendChild(txnElement);          
//to get data from transaction into element      
Element UREF_TRANSACTION_ID = txndoc.createElement("UREF_TRANSACTION_ID");       
UREF_TRANSACTION_ID.appendChild(txndoc.createTextNode(transaction.getTRANSACTION_ID()));       
txnElement.appendChild(UREF_TRANSACTION_ID);          
    
Element PARTNER_ID = txndoc.createElement("PARTNER_ID");       
PARTNER_ID.appendChild(txndoc.createTextNode(transaction.getPARTNER_ID()));       
txnElement.appendChild(PARTNER_ID);     
    
Element PALS_COUNTRY_CODE = txndoc.createElement("PALS_COUNTRY_CODE");       
PALS_COUNTRY_CODE.appendChild(txndoc.createTextNode(transaction.getPALS_COUNTRY_CODE()));       
txnElement.appendChild(PALS_COUNTRY_CODE);    
    
Element TRANSACTION_TYPE = txndoc.createElement("TRANSACTION_TYPE");       
TRANSACTION_TYPE.appendChild(txndoc.createTextNode(transaction.getTRANSACTION_TYPE()));       
txnElement.appendChild(TRANSACTION_TYPE);    
    
Element PURCHASE_CURRENCY = txndoc.createElement("PURCHASE_CURRENCY");       
PURCHASE_CURRENCY.appendChild(txndoc.createTextNode(transaction.getPURCHASE_CURRENCY()));       
txnElement.appendChild(PURCHASE_CURRENCY);    
    
Element KSID = txndoc.createElement("KSID");       
KSID.appendChild(txndoc.createTextNode(transaction.getKSID()));       
txnElement.appendChild(KSID);    
    
Element PURCHASE_COUNTRY_CODE = txndoc.createElement("PURCHASE_COUNTRY_CODE");       
PURCHASE_COUNTRY_CODE.appendChild(txndoc.createTextNode(transaction.getPURCHASE_COUNTRY_CODE()));       
txnElement.appendChild(PURCHASE_COUNTRY_CODE);        
    
Element CARD_1_ID = txndoc.createElement("CARD_1_ID");       
CARD_1_ID.appendChild(txndoc.createTextNode(transaction.getCARD_1_ID()));       
txnElement.appendChild(CARD_1_ID);      
        
Element ODOMETER_PORTAL = txndoc.createElement("ODOMETER_PORTAL");       
ODOMETER_PORTAL.appendChild(txndoc.createTextNode(transaction.getODOMETER_PORTAL()));       
txnElement.appendChild(ODOMETER_PORTAL);      
	    
Element ODOMETER = txndoc.createElement("ODOMETER");       
ODOMETER.appendChild(txndoc.createTextNode(transaction.getODOMETER()));       
txnElement.appendChild(ODOMETER);     
    
Element TRANSACTION_DT = txndoc.createElement("TRANSACTION_DT");       
TRANSACTION_DT.appendChild(txndoc.createTextNode(transaction.getTRANSACTION_DT()));       
txnElement.appendChild(TRANSACTION_DT);     
    
Element TRANSACTION_TIME = txndoc.createElement("TRANSACTION_TIME");       
TRANSACTION_TIME.appendChild(txndoc.createTextNode(transaction.getTRANSACTION_TIME()));       
txnElement.appendChild(TRANSACTION_TIME);     
    
Element STATION_NAME = txndoc.createElement("STATION_NAME");       
STATION_NAME.appendChild(txndoc.createTextNode(transaction.getSTATION_NAME()));       
txnElement.appendChild(STATION_NAME);     
    
Element INVOICE_NUMBER_NON_COLLECTIVE = txndoc.createElement("INVOICE_NUMBER_NON_COLLECTIVE");       
INVOICE_NUMBER_NON_COLLECTIVE.appendChild(txndoc.createTextNode(transaction.getINVOICE_NUMBER_NON_COLLECTIVE()));       
txnElement.appendChild(INVOICE_NUMBER_NON_COLLECTIVE);     
          
Element MODIFIED_BY = txndoc.createElement("MODIFIED_BY");       
MODIFIED_BY.appendChild(txndoc.createTextNode(transaction.getMODIFIED_BY()));       
txnElement.appendChild(MODIFIED_BY);     
	      
Element PORTAL_MODIFIED_DATE = txndoc.createElement("PORTAL_MODIFIED_DATE");       
PORTAL_MODIFIED_DATE.appendChild(txndoc.createTextNode(transaction.getPORTAL_MODIFIED_DATE()));       
txnElement.appendChild(PORTAL_MODIFIED_DATE);     
	      
Element INVOICE_NUMBER_COLLECTIVE = txndoc.createElement("INVOICE_NUMBER_COLLECTIVE");       
INVOICE_NUMBER_COLLECTIVE.appendChild(txndoc.createTextNode(transaction.getINVOICE_NUMBER_COLLECTIVE()));       
txnElement.appendChild(INVOICE_NUMBER_COLLECTIVE);     
	      
Element ACCOUNT_ID = txndoc.createElement("ACCOUNT_ID");       
ACCOUNT_ID.appendChild(txndoc.createTextNode(transaction.getACCOUNT_ID()));       
txnElement.appendChild(ACCOUNT_ID);     
	      
Element CARDGROUP_MAIN_TYPE = txndoc.createElement("CARDGROUP_MAIN_TYPE");       
CARDGROUP_MAIN_TYPE.appendChild(txndoc.createTextNode(transaction.getCARDGROUP_MAIN_TYPE()));       
txnElement.appendChild(CARDGROUP_MAIN_TYPE);     
    
Element CARDGROUP_SUB_TYPE = txndoc.createElement("CARDGROUP_SUB_TYPE");       
CARDGROUP_SUB_TYPE.appendChild(txndoc.createTextNode(transaction.getCARDGROUP_SUB_TYPE()));       
txnElement.appendChild(CARDGROUP_SUB_TYPE);     
       
Element CARDGROUP_SEQ = txndoc.createElement("CARDGROUP_SEQ");       
CARDGROUP_SEQ.appendChild(txndoc.createTextNode(transaction.getCARDGROUP_SEQ()));       
txnElement.appendChild(CARDGROUP_SEQ);     
       
Element PREVIOUS_ODOMETER = txndoc.createElement("PREVIOUS_ODOMETER");       
PREVIOUS_ODOMETER.appendChild(txndoc.createTextNode(transaction.getPREVIOUS_ODOMETER()));       
txnElement.appendChild(PREVIOUS_ODOMETER);     
       
Element PRODUCT_NAME = txndoc.createElement("PRODUCT_NAME");       
PRODUCT_NAME.appendChild(txndoc.createTextNode(transaction.getPRODUCT_NAME()));       
txnElement.appendChild(PRODUCT_NAME);     
       
Element QUANTITY = txndoc.createElement("QUANTITY");       
QUANTITY.appendChild(txndoc.createTextNode(transaction.getQUANTITY()));       
txnElement.appendChild(QUANTITY);     
       
Element CURRENCY_UNIT_PRICE = txndoc.createElement("CURRENCY_UNIT_PRICE");       
CURRENCY_UNIT_PRICE.appendChild(txndoc.createTextNode(transaction.getCURRENCY_UNIT_PRICE()));       
txnElement.appendChild(CURRENCY_UNIT_PRICE);     
       
Element INVOICED_VAT = txndoc.createElement("INVOICED_VAT");       
INVOICED_VAT.appendChild(txndoc.createTextNode(transaction.getINVOICED_VAT()));       
txnElement.appendChild(INVOICED_VAT);     
       
Element INVOICED_NET_AMOUNT = txndoc.createElement("INVOICED_NET_AMOUNT");       
INVOICED_NET_AMOUNT.appendChild(txndoc.createTextNode(transaction.getINVOICED_NET_AMOUNT()));       
txnElement.appendChild(INVOICED_NET_AMOUNT);     
       
Element INVOICE_DISCOUNT_AMOUNT = txndoc.createElement("INVOICE_DISCOUNT_AMOUNT");       
INVOICE_DISCOUNT_AMOUNT.appendChild(txndoc.createTextNode(transaction.getINVOICE_DISCOUNT_AMOUNT()));       
txnElement.appendChild(INVOICE_DISCOUNT_AMOUNT);    
       
Element INVOICED_UNIT_PRICE = txndoc.createElement("INVOICED_UNIT_PRICE");       
INVOICED_UNIT_PRICE.appendChild(txndoc.createTextNode(transaction.getINVOICED_UNIT_PRICE()));       
txnElement.appendChild(INVOICED_UNIT_PRICE);    
    
Element INVOICED_GROSS_AMOUNT = txndoc.createElement("INVOICED_GROSS_AMOUNT");       
INVOICED_GROSS_AMOUNT.appendChild(txndoc.createTextNode(transaction.getINVOICED_GROSS_AMOUNT()));       
txnElement.appendChild(INVOICED_GROSS_AMOUNT);    
    
Element INVOICED_NET_AMOUNT_REBATED = txndoc.createElement("INVOICED_NET_AMOUNT_REBATED");       
INVOICED_NET_AMOUNT_REBATED.appendChild(txndoc.createTextNode(transaction.getINVOICED_NET_AMOUNT_REBATED()));       
txnElement.appendChild(INVOICED_NET_AMOUNT_REBATED);    
      
Element INVOIVED_VAT_REBATED = txndoc.createElement("INVOIVED_VAT_REBATED");       
INVOIVED_VAT_REBATED.appendChild(txndoc.createTextNode(transaction.getINVOIVED_VAT_REBATED()));       
txnElement.appendChild(INVOIVED_VAT_REBATED);    
    
Element INVOICED_UNIT_PRICE_REBATED = txndoc.createElement("INVOICED_UNIT_PRICE_REBATED");       
INVOICED_UNIT_PRICE_REBATED.appendChild(txndoc.createTextNode(transaction.getINVOICED_UNIT_PRICE_REBATED()));       
txnElement.appendChild(INVOICED_UNIT_PRICE_REBATED);    
    
Element CURRENCY_GROSS_AMOUNT_REBATED = txndoc.createElement("CURRENCY_GROSS_AMOUNT_REBATED");       
CURRENCY_GROSS_AMOUNT_REBATED.appendChild(txndoc.createTextNode(transaction.getCURRENCY_GROSS_AMOUNT_REBATED()));       
txnElement.appendChild(CURRENCY_GROSS_AMOUNT_REBATED);    
          
Element CURRENCY_UNIT_PRICE_REBATED = txndoc.createElement("CURRENCY_UNIT_PRICE_REBATED");       
CURRENCY_UNIT_PRICE_REBATED.appendChild(txndoc.createTextNode(transaction.getCURRENCY_UNIT_PRICE_REBATED()));       
txnElement.appendChild(CURRENCY_UNIT_PRICE_REBATED);    
          
Element CURRENCY_GROSS_AMOUNT = txndoc.createElement("CURRENCY_GROSS_AMOUNT");       
CURRENCY_GROSS_AMOUNT.appendChild(txndoc.createTextNode(transaction.getCURRENCY_GROSS_AMOUNT()));       
txnElement.appendChild(CURRENCY_GROSS_AMOUNT);    
	      
Element UNIT_OF_MEASURE = txndoc.createElement("UNIT_OF_MEASURE");       
UNIT_OF_MEASURE.appendChild(txndoc.createTextNode(transaction.getUNIT_OF_MEASURE()));       
txnElement.appendChild(UNIT_OF_MEASURE);    
	      
Element CURRENCY_VAT = txndoc.createElement("CURRENCY_VAT");       
CURRENCY_VAT.appendChild(txndoc.createTextNode(transaction.getCURRENCY_VAT()));       
txnElement.appendChild(CURRENCY_VAT);    
    
Element CURRENCY_DISCOUNT_AMOUNT = txndoc.createElement("CURRENCY_DISCOUNT_AMOUNT");       
CURRENCY_DISCOUNT_AMOUNT.appendChild(txndoc.createTextNode(transaction.getCURRENCY_DISCOUNT_AMOUNT()));       
txnElement.appendChild(CURRENCY_DISCOUNT_AMOUNT);    
    
Element CURRENCY_NET_AMOUNT = txndoc.createElement("CURRENCY_NET_AMOUNT");       
CURRENCY_NET_AMOUNT.appendChild(txndoc.createTextNode(transaction.getCURRENCY_NET_AMOUNT()));       
txnElement.appendChild(CURRENCY_NET_AMOUNT);    
         
Element INVOICED_GROSS_AMOUNT_REBATED = txndoc.createElement("INVOICED_GROSS_AMOUNT_REBATED");       
INVOICED_GROSS_AMOUNT_REBATED.appendChild(txndoc.createTextNode(transaction.getINVOICED_GROSS_AMOUNT_REBATED()));       
txnElement.appendChild(INVOICED_GROSS_AMOUNT_REBATED);    
	     
Element DRIVER_NUMBER = txndoc.createElement("DRIVER_NUMBER");       
DRIVER_NUMBER.appendChild(txndoc.createTextNode(transaction.getDRIVER_NUMBER()));       
txnElement.appendChild(DRIVER_NUMBER);    
	    
Element DRIVER_NAME = txndoc.createElement("DRIVER_NAME");       
DRIVER_NAME.appendChild(txndoc.createTextNode(transaction.getDRIVER_NAME()));       
txnElement.appendChild(DRIVER_NAME);    
        
Element VEHICLE_NUMBER = txndoc.createElement("VEHICLE_NUMBER");       
VEHICLE_NUMBER.appendChild(txndoc.createTextNode(transaction.getVEHICLE_NUMBER()));       
txnElement.appendChild(VEHICLE_NUMBER);    
        
Element INTERNAL_NAME = txndoc.createElement("INTERNAL_NAME");       
INTERNAL_NAME.appendChild(txndoc.createTextNode(transaction.getINTERNAL_NAME()));       
txnElement.appendChild(INTERNAL_NAME);        
}           
//to assign transaction report generated to element  
setVariableData("transactionReport",elementTransactionReport);       
addAuditTrailEntry("XML Created");         
  
}                       
catch (Exception ex) {                   
addAuditTrailEntry("Exception: " + ex); 
}]]>
    </bpelx:exec>
    <assign name="TxnReportToTxnReport">
      <bpelx:annotation>
        <bpelx:pattern>transformation</bpelx:pattern>
      </bpelx:annotation>
      <copy>
        <from expression="ora:doXSLTransformForDoc('xsl/TxnReport_to_TxnReport.xsl', $transactionReport)"/>
        <to variable="transactionReportOutput"/>
      </copy>
    </assign>
    <switch name="Switch1">
      <case condition="1=1">
        <bpelx:annotation>
          <bpelx:general>
            <bpelx:property name="userLabel">Convert to base64</bpelx:property>
          </bpelx:general>
        </bpelx:annotation>
        <scope name="Scope1">
          <variables>
            <variable name="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                      messageType="ns3:Produce_Message_msg"/>
          </variables>
          <sequence name="Sequence2">
          <bpelx:exec import="java.io.ByteArrayOutputStream"/>
          <bpelx:exec import="java.io.StringWriter"/>
        <bpelx:exec import="javax.xml.transform.*"/>
        <bpelx:exec import="javax.xml.transform.dom.*"/>
        <bpelx:exec import="javax.xml.transform.stream.*"/>
        <bpelx:exec import="javax.xml.transform.TransformerFactory"/>
            <bpelx:exec name="Java_Embedding" version="1.5" language="java">
              <![CDATA[/*Write your java code below e.g.          
	System.out.println("Hello, World");         
*/         
try{         
Element elementTransactionReport;                            
elementTransactionReport = (Element)getVariableData("transactionReportOutput");         
oracle.soa.common.util.Base64Encoder encoder = new oracle.soa.common.util.Base64Encoder();        
String input_str = elementTransactionReport.getTextContent();          
    
DOMSource domSource = new DOMSource(elementTransactionReport);    
StringWriter writer = new StringWriter();    
StreamResult result = new StreamResult(writer);    
TransformerFactory tf = TransformerFactory.newInstance();    
Transformer transformer = tf.newTransformer();    
transformer.transform(domSource, result);    
    
String EncodedString = encoder.encode(writer.toString());        
setVariableData("base64TxnData",EncodedString);         
addAuditTrailEntry("Base64 Transaction data generated");       
}         
catch (TransformerConfigurationException e) {       
                    e.printStackTrace();       
}     
catch (Exception ex) {                            
addAuditTrailEntry("Exception: " + ex);          
}]]>
            </bpelx:exec>
            <switch name="Switch2">
              <case condition="true()"><assign name="AssignInvokeSOARuleEngineNotificationJMSProducerV1"
                                               xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/">
                  <copy>
                    <from variable="SOARuleEngineServiceJMSConsumerV1_IV"
                          part="body" query="/ns6:RuleServiceRequest/RuleID"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:RuleID"/>
                  </copy>
                  <copy>
                    <from variable="SOARuleEngineServiceJMSConsumerV1_IV"
                          part="body"
                          query="/ns6:RuleServiceRequest/RuleSubscriptionID"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:SubscriptionID"/>
                  </copy>
                  <copy>
                    <from variable="SOARuleEngineServiceJMSConsumerV1_IV"
                          part="body"
                          query="/ns6:RuleServiceRequest/NotificationInfo/NotificationMode"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:NotificationChannel"/>
                  </copy>
                  <copy>
                    <from variable="SOARuleEngineServiceJMSConsumerV1_IV"
                          part="body"
                          query="/ns6:RuleServiceRequest/NotificationDateTime"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:NotificationTime"/>
                  </copy>
                  <copy>
                    <from variable="SOARuleEngineServiceJMSConsumerV1_IV"
                          part="body"
                          query="/ns6:RuleServiceRequest/NotificationInfo/EmailID"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:EmailID"/>
                  </copy>
                  <copy>
                    <from expression="concat('Subscription:',bpws:getVariableData('SOARuleEngineServiceJMSConsumerV1_IV','body','/ns6:RuleServiceRequest/RuleSubscriptionID'),' -Transaction Report Notification')"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:NotificationSubject"/>
                  </copy>
                  <copy>
                    <from expression="concat('Hello, &lt;/br>&lt;/br>Please find attached the Transaction Report subscribed by you.&lt;/br>&lt;/br>&lt;/br>','&lt;/br>')"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:NotificationBody"/>
                  </copy>
                  <copy>
                    <from expression="concat('Company:',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/Partner'),',Account: ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/Account'),',Type: ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/Type'),',Report: ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/ReportType'),',Period: ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/TransactionDateFrom'),' to ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/TransactionDateTo'),',,,Please note that international transactions are not yet visible in the portal. In some cases; it may take 2 days before national transactions is shown.,Note: All prices are in DKK ...')"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:ReportHeader"/>
                  </copy>
                  <copy>
                    <from variable="base64TxnData"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:base64BinaryData"/>
                  </copy>
                  <copy>
                    <from expression="'XML'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:AttachmentType"/>
                  </copy>
                  <copy>
                    <from expression="'YES'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:ConversionRequired"/>
                  </copy>
                  <copy>
                    <from expression="'EXCEL'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:ConversionType"/>
                  </copy>
                  <copy>
                    <from expression="'TransactionReport.xls'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:AttachmentName"/>
                  </copy>
                </assign></case>
              <otherwise>
                <assign name="AssignInvokeSOARuleEngineNotificationJMSProducerV1">
                  <copy>
                    <from variable="inputVariable" part="payload"
                          query="/ns1:TransactionRequest/RuleID"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:RuleID"/>
                  </copy>
                  <copy>
                    <from variable="inputVariable" part="payload"
                          query="/ns1:TransactionRequest/RuleSubscriptionID"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:SubscriptionID"/>
                  </copy>
                  <copy>
                    <from expression="'EMAIL'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:NotificationChannel"/>
                  </copy>
                  <copy>
                    <from variable="inputVariable" part="payload"
                          query="/ns1:TransactionRequest/NotificationDateTime"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:NotificationTime"/>
                  </copy>
                  <copy>
                    <from expression="'harneet.kochhar@lntinfotech.com;nitpa@statoilfuelretail.com;Ashish.Thakkar@statoilfuelretail.com;audhildandersen.randa@statoilfuelretail.com'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:EmailID"/>
                  </copy>
                  <copy>
                    <from expression="'Transaction Report Notification'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:NotificationSubject"/>
                  </copy>
                  <copy>
                    <from expression="'Hello, Please find attached the Transaction Report subscribed by you.'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:NotificationBody"/>
                  </copy>
                  <copy>
                    <from expression="concat('Company:',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/Partner'),',Account: ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/Account'),',Type: ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/Type'),',Report: ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/ReportType'),',Period: ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/TransactionDateFrom'),' to ',bpws:getVariableData('transactionReportInput','/ns1:TransactionReportInput/TransactionDateTo'),',,,Please note that international transactions are not yet visible in the portal. In some cases; it may take 2 days before national transactions is shown.,Note: All prices are in DKK ...')"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:ReportHeader"/>
                  </copy>
                  <copy>
                    <from variable="base64TxnData"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:base64BinaryData"/>
                  </copy>
                  <copy>
                    <from expression="'XML'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:AttachmentType"/>
                  </copy>
                  <copy>
                    <from expression="'YES'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:ConversionRequired"/>
                  </copy>
                  <copy>
                    <from expression="'EXCEL'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:ConversionType"/>
                  </copy>
                  <copy>
                    <from expression="'TransactionReport.xls'"/>
                    <to variable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                        part="body"
                        query="/ns4:NotificationRequest/ns4:Attachment/ns4:Attachment/ns4:AttachmentName"/>
                  </copy>
                </assign>
              </otherwise>
            </switch>
            <!--bpelx:exec import="java.io.ByteArrayOutputStream"/>
        <bpelx:exec import="javax.xml.transform.*"/>
        <bpelx:exec import="javax.xml.transform.dom.*"/>
        <bpelx:exec import="javax.xml.transform.stream.*"/>
        <bpelx:exec import="javax.xml.transform.TransformerFactory"/>
          <bpelx:exec name="Java_Embedding" version="1.5" language="java">
            <![CDATA[try {   
// Load the document.         
Element elementTransactionReport;                   
elementTransactionReport = (Element)getVariableData("transactionReportOutput");                   
Document txndoc = elementTransactionReport.getOwnerDocument();              
         
// Create a new memory stream.         
ByteArrayOutputStream outStream = new ByteArrayOutputStream();         
         
// Save the document to stream.         
Source source = new DOMSource(txndoc);      
Result result = new StreamResult(outStream);      
TransformerFactory factory = TransformerFactory.newInstance();    
Transformer transformer = factory.newTransformer();   
transformer.transform(source, result);      
      
// Convert the document to byte form.         
byte[] docBytes = outStream.toByteArray();         
   
String byteArrayString = docBytes.toString();   
byte[] temp = byteArrayString.getBytes(); 
String byteArrrayString = new String(temp);      
setVariableData("byteArrayString",byteArrayString);   
                } catch (TransformerConfigurationException e) {   
                    e.printStackTrace();   
                } catch (TransformerException e) {   
                    e.printStackTrace();   
                }]]>
          </bpelx:exec-->
            <invoke name="InvokeSOARuleEngineNotificationJMSProducerV1"
                    inputVariable="InvokeSOARuleEngineNotificationJMSProducerV1_Produce_Message_IV"
                    partnerLink="SOARuleEngineNotificationJMSProducerV1"
                    portType="ns3:Produce_Message_ptt"
                    operation="Produce_Message" bpelx:invokeAsDetail="no"/>
          </sequence>
        </scope>
      </case>
      <otherwise>
        <sequence>
          <assign name="TrasnactionReportToWriteTrasnactionReport"
                  bpelx:validate="yes">
            <bpelx:annotation>
              <bpelx:pattern>transformation</bpelx:pattern>
            </bpelx:annotation>
            <copy>
              <from expression="ora:doXSLTransformForDoc('xsl/TransactionReport_to_WriteTransactionReport.xsl', $transactionReportOutput)"/>
              <to variable="InvokeWriteTransactionReport_IV" part="body"/>
            </copy>
          </assign>
          <invoke name="InvokeWriteTransactionReport"
                  inputVariable="InvokeWriteTransactionReport_IV"
                  partnerLink="WriteTransactionReport" portType="ns2:Write_ptt"
                  operation="Write" bpelx:invokeAsDetail="no"/>
        </sequence>
      </otherwise>
    </switch>
    <!--assign name="AssignTransactionReport"
                         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/">
      <copy>
        <from variable="transactionReport" query="/ns1:TransactionReport"/>
        <to variable="txnReport" query="/ns1:TransactionReport"/>
      </copy>
    </assign-->
    <!--assign name="TransactionReport_to_TransactionReport">
      <bpelx:annotation>
        <bpelx:pattern>transformation</bpelx:pattern>
      </bpelx:annotation>
      <copy>
        <from expression="ora:doXSLTransformForDoc('xsl/Transformation_1.xsl', $transactionReport)"/>
        <to variable="txnReport"/>
      </copy>
    </assign-->
  </sequence>
</process>