<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Wed Jul 16 18:54:34 IST 2014
  Author:  292001
  Type: BPEL 1.1 Process
  Purpose: One Way BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="GenerateTransactionReport"
               targetNamespace="http://xmlns.oracle.com/E012PortalTransactionReportApp/E012PortalTransactionReport/GenerateTransactionReport"
               xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
               xmlns:client="http://xmlns.oracle.com/E012PortalTransactionReportApp/E012PortalTransactionReport/GenerateTransactionReport"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:ns1="http://www.statoilfuelretail.com/integration/engage/E012PortalTransactionReportABO"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:aia="http://www.oracle.com/XSL/Transform/java/oracle.apps.aia.core.xpath.AIAFunctions"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/file/E012PortalTransactionReportApp/E012PortalTransactionReport/WriteTransactionReport">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="generatetransactionreport_client" partnerLinkType="client:GenerateTransactionReport" myRole="GenerateTransactionReportProvider"/>
    <partnerLink name="WriteTransactionReport" partnerLinkType="ns2:Write_plt"
                 partnerRole="Write_role"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:GenerateTransactionReportRequestMessage"/>
    <variable name="transactionReport" element="ns1:TransactionReport"/>
    <variable name="transactionString" type="xsd:string"/>
    <variable name="txnReport" element="ns1:TransactionReport"/>
    <variable name="transactionReportInput"
              element="ns1:TransactionReportInput"/>
    <variable name="InvokeWriteTransactionReport_IV"
              messageType="ns2:Write_msg"/>
  </variables>
  <faultHandlers>
    <catchAll>
      <empty name="Empty"/>
    </catchAll>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in GenerateTransactionReport.wsdl) -->
    <receive name="receiveInput" partnerLink="generatetransactionreport_client" portType="client:GenerateTransactionReport" operation="generate" variable="inputVariable" createInstance="yes"/>
    <assign name="XformInputToTxnInput">
      <bpelx:annotation>
        <bpelx:pattern>transformation</bpelx:pattern>
      </bpelx:annotation>
      <copy>
        <from expression="ora:doXSLTransformForDoc('xsl/E012Input_to_TransactionReportInput.xsl', $inputVariable.payload)"/>
        <to variable="transactionReportInput"/>
      </copy>
    </assign>
    <bpelx:exec import="e012portaltransactionreport.TransactionReport"/>
    <bpelx:exec import="e012portaltransactionreport.TransactionReportInput"/>
    <bpelx:exec import="e012portaltransactionreport.TransactionReportOutput"/>
    <bpelx:exec import="java.util.ArrayList"/>
    <bpelx:exec import="org.w3c.dom.Element"/>
    <bpelx:exec import="org.w3c.dom.Document"/>
    <bpelx:exec import="org.w3c.dom.Text"/>
    <!--bpelx:exec/-->
    <bpelx:exec name="Java_Embedding" version="1.5" language="java">
      <![CDATA[try {                    
//output variable of TransactionReportInput type to set Txn Report input      
TransactionReportInput input= new TransactionReportInput();    
    
//get input for Txn Report      
input.setCountry((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/Country")).getText()));        
input.setAccount((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/Account")).getText()));             
input.setPartner((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/Partner")).getText()));             
input.setType((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/Type")).getText()));             
input.setReportType((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/ReportType")).getText()));             
input.setTransactionBasis((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/TransactionBasis")).getText()));             
input.setTransactionBasisValues((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/TransactionBasisValues")).getText()));             
input.setTransactionDateFrom((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/TransactionDateFrom")).getText()));             
input.setTransactionDateTo((String)(((oracle.xml.parser.v2.XMLNode)getVariableData("transactionReportInput","/ns1:TransactionReportInput/TransactionDateTo")).getText()));       
addAuditTrailEntry("Transaction Input created");        
      
//output variable of TransactionReportOutput type to get Txn Report output      
TransactionReportOutput transaction = new TransactionReportOutput();                   
ArrayList transactionArray = new ArrayList<TransactionReportOutput>();                   
addAuditTrailEntry("Transaction output class initialised");       
      
//generate Txn Report      
transactionArray=TransactionReport.GenerateTransactionReport(input);           
addAuditTrailEntry("Transaction Report Generated");      
      
//Create Element of Txn type to return Transaction Report      
Element elementTransactionReport;      
elementTransactionReport = (Element)getVariableData("transactionReport");      
Document txndoc = elementTransactionReport.getOwnerDocument();      
      
//to loop through resultset to set the xml element      
for (int i = 0; i < transactionArray.size(); i++){        
// to set the transaction type output for each iteration      
transaction=(TransactionReportOutput)transactionArray.get(i);      
   
Element txnElement = txndoc.createElement("Transaction");   
txndoc.appendChild(txnElement);   
  
//to get data from transaction into string variables   
Element UREF_TRANSACTION_ID = txndoc.createElement("UREF_TRANSACTION_ID");   
UREF_TRANSACTION_ID.appendChild(txndoc.createTextNode(transaction.getTRANSACTION_ID()));   
txnElement.appendChild(UREF_TRANSACTION_ID);   
         
String PARTNER_ID=transaction.getPARTNER_ID();        
String PALS_COUNTRY_CODE=transaction.getPALS_COUNTRY_CODE();       
String TRANSACTION_TYPE=transaction.getTRANSACTION_TYPE();        
String PURCHASE_CURRENCY=transaction.getPURCHASE_CURRENCY();        
String KSID=transaction.getKSID();        
String PURCHASE_COUNTRY_CODE=transaction.getPURCHASE_COUNTRY_CODE();        
String CARD_1_ID=transaction.getCARD_1_ID();        
String ODOMETER_PORTAL=transaction.getODOMETER_PORTAL();        
String ODOMETER=transaction.getODOMETER();        
String TRANSACTION_DT=transaction.getTRANSACTION_DT();        
String TRANSACTION_TIME=transaction.getTRANSACTION_TIME();        
String STATION_NAME=transaction.getSTATION_NAME();        
String INVOICE_NUMBER_NON_COLLECTIVE=transaction.getINVOICE_NUMBER_NON_COLLECTIVE();        
String MODIFIED_BY=transaction.getMODIFIED_BY();        
String PORTAL_MODIFIED_DATE=transaction.getPORTAL_MODIFIED_DATE();        
String INVOICE_NUMBER_COLLECTIVE=transaction.getINVOICE_NUMBER_COLLECTIVE();        
String ACCOUNT_ID=transaction.getACCOUNT_ID();        
String CARDGROUP_MAIN_TYPE=transaction.getCARDGROUP_MAIN_TYPE();        
String CARDGROUP_SUB_TYPE=transaction.getCARDGROUP_SUB_TYPE();        
String CARDGROUP_SEQ=transaction.getCARDGROUP_SEQ();        
String PREVIOUS_ODOMETER=transaction.getPREVIOUS_ODOMETER();        
String PRODUCT_NAME=transaction.getPRODUCT_NAME();        
String QUANTITY=transaction.getQUANTITY();        
String CURRENCY_UNIT_PRICE=transaction.getCURRENCY_UNIT_PRICE();        
String INVOICED_VAT=transaction.getINVOICED_VAT();        
String INVOICED_NET_AMOUNT=transaction.getINVOICED_NET_AMOUNT();        
String INVOICE_DISCOUNT_AMOUNT=transaction.getINVOICE_DISCOUNT_AMOUNT();        
String INVOICED_UNIT_PRICE=transaction.getINVOICED_UNIT_PRICE();        
String INVOICED_GROSS_AMOUNT=transaction.getINVOICED_GROSS_AMOUNT();        
String INVOICED_NET_AMOUNT_REBATED=transaction.getINVOICED_GROSS_AMOUNT_REBATED();        
String INVOIVED_VAT_REBATED=transaction.getINVOIVED_VAT_REBATED();        
String INVOICED_UNIT_PRICE_REBATED=transaction.getINVOICED_UNIT_PRICE_REBATED();        
String CURRENCY_GROSS_AMOUNT_REBATED=transaction.getCURRENCY_GROSS_AMOUNT_REBATED();        
String CURRENCY_UNIT_PRICE_REBATED=transaction.getCURRENCY_UNIT_PRICE_REBATED();        
String CURRENCY_GROSS_AMOUNT=transaction.getCURRENCY_GROSS_AMOUNT();        
String UNIT_OF_MEASURE=transaction.getUNIT_OF_MEASURE();        
String CURRENCY_VAT=transaction.getCURRENCY_VAT();        
String CURRENCY_DISCOUNT_AMOUNT=transaction.getCURRENCY_DISCOUNT_AMOUNT();        
String CURRENCY_NET_AMOUNT=transaction.getCURRENCY_NET_AMOUNT();        
String INVOICED_GROSS_AMOUNT_REBATED=transaction.getINVOICED_GROSS_AMOUNT_REBATED();        
String DRIVER_NUMBER=transaction.getDRIVER_NUMBER();        
String DRIVER_NAME=transaction.getDRIVER_NAME();      
String VEHICLE_NUMBER=transaction.getVEHICLE_NUMBER();        
String INTERNAL_NAME=transaction.getINTERNAL_NAME();    
//addAuditTrailEntry("ID: "+transaction.getTRANSACTION_ID());       
}       
setVariableData("transactionReport",elementTransactionReport);   
//setVariableData("transactionReport","/ns1:TransactionReport/Transaction[2]/UREF_TRANSACTION_ID", transaction.getTRANSACTION_ID());                 
      
//addAuditTrailEntry("XML Created: "+TransactionReport);      
           
//setVariableData("transactionString", transactionVal);             
//setVariableData("output", "payload","/tns:rating", new Integer(rating));                   
}                   
catch (Exception re) {               
addAuditTrailEntry("XML Faulted");         
}]]>
    </bpelx:exec><assign name="AssignTransactionReport"
                         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/">
      <!--bpelx:append>
        <bpelx:from variable="transactionString"/>
        <bpelx:to variable="transactionReport" query="/ns1:TransactionReport"/>
      </bpelx:append>
      <bpelx:append>
        <bpelx:from expression="&lt;Transaction>&lt;UREF_TRANSACTION_ID>HI&lt;/UREF_TRANSACTION_ID>&lt;/Transaction>"/>
        <bpelx:to variable="transactionReport" query="/ns1:TransactionReport"/>
      </bpelx:append-->
      <copy>
        <from variable="transactionReport" query="/ns1:TransactionReport"/>
        <to variable="txnReport" query="/ns1:TransactionReport"/>
      </copy>
    </assign>
    <assign name="TransactionReport_to_TransactionReport">
      <bpelx:annotation>
        <bpelx:pattern>transformation</bpelx:pattern>
      </bpelx:annotation>
      <copy>
        <from expression="ora:doXSLTransformForDoc('xsl/Transformation_1.xsl', $transactionReport)"/>
        <to variable="txnReport"/>
      </copy>
    </assign>
    <assign name="TrasnactionReportToWriteTrasnactionReport">
      <bpelx:annotation>
        <bpelx:pattern>transformation</bpelx:pattern>
      </bpelx:annotation>
      <copy>
        <from expression="ora:doXSLTransformForDoc('xsl/TransactionReport_to_WriteTransactionReport.xsl', $txnReport)"/>
        <to variable="InvokeWriteTransactionReport_IV" part="body"/>
      </copy>
    </assign>
    <invoke name="InvokeWriteTransactionReport"
            inputVariable="InvokeWriteTransactionReport_IV"
            partnerLink="WriteTransactionReport" portType="ns2:Write_ptt"
            operation="Write" bpelx:invokeAsDetail="no"/>
  </sequence>
</process>